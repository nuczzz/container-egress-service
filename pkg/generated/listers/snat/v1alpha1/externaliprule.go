/*
Copyright 2021 The Kube-OVN CES Controller Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubeovn/ces-controller/pkg/apis/snat/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExternalIPRuleLister helps list ExternalIPRules.
// All objects returned here must be treated as read-only.
type ExternalIPRuleLister interface {
	// List lists all ExternalIPRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ExternalIPRule, err error)
	// ExternalIPRules returns an object that can list and get ExternalIPRules.
	ExternalIPRules(namespace string) ExternalIPRuleNamespaceLister
	ExternalIPRuleListerExpansion
}

// externalIPRuleLister implements the ExternalIPRuleLister interface.
type externalIPRuleLister struct {
	indexer cache.Indexer
}

// NewExternalIPRuleLister returns a new ExternalIPRuleLister.
func NewExternalIPRuleLister(indexer cache.Indexer) ExternalIPRuleLister {
	return &externalIPRuleLister{indexer: indexer}
}

// List lists all ExternalIPRules in the indexer.
func (s *externalIPRuleLister) List(selector labels.Selector) (ret []*v1alpha1.ExternalIPRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExternalIPRule))
	})
	return ret, err
}

// ExternalIPRules returns an object that can list and get ExternalIPRules.
func (s *externalIPRuleLister) ExternalIPRules(namespace string) ExternalIPRuleNamespaceLister {
	return externalIPRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExternalIPRuleNamespaceLister helps list and get ExternalIPRules.
// All objects returned here must be treated as read-only.
type ExternalIPRuleNamespaceLister interface {
	// List lists all ExternalIPRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ExternalIPRule, err error)
	// Get retrieves the ExternalIPRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ExternalIPRule, error)
	ExternalIPRuleNamespaceListerExpansion
}

// externalIPRuleNamespaceLister implements the ExternalIPRuleNamespaceLister
// interface.
type externalIPRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExternalIPRules in the indexer for a given namespace.
func (s externalIPRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ExternalIPRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ExternalIPRule))
	})
	return ret, err
}

// Get retrieves the ExternalIPRule from the indexer for a given namespace and name.
func (s externalIPRuleNamespaceLister) Get(name string) (*v1alpha1.ExternalIPRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("externaliprule"), name)
	}
	return obj.(*v1alpha1.ExternalIPRule), nil
}
